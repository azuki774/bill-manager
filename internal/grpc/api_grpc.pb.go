// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ElectConsumePostClient is the client API for ElectConsumePost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ElectConsumePostClient interface {
	ElectConsume(ctx context.Context, in *ElectConsumeData, opts ...grpc.CallOption) (*empty.Empty, error)
}

type electConsumePostClient struct {
	cc grpc.ClientConnInterface
}

func NewElectConsumePostClient(cc grpc.ClientConnInterface) ElectConsumePostClient {
	return &electConsumePostClient{cc}
}

func (c *electConsumePostClient) ElectConsume(ctx context.Context, in *ElectConsumeData, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/billManagerAPI.electConsumePost/electConsume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ElectConsumePostServer is the server API for ElectConsumePost service.
// All implementations must embed UnimplementedElectConsumePostServer
// for forward compatibility
type ElectConsumePostServer interface {
	ElectConsume(context.Context, *ElectConsumeData) (*empty.Empty, error)
	mustEmbedUnimplementedElectConsumePostServer()
}

// UnimplementedElectConsumePostServer must be embedded to have forward compatible implementations.
type UnimplementedElectConsumePostServer struct {
}

func (UnimplementedElectConsumePostServer) ElectConsume(context.Context, *ElectConsumeData) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ElectConsume not implemented")
}
func (UnimplementedElectConsumePostServer) mustEmbedUnimplementedElectConsumePostServer() {}

// UnsafeElectConsumePostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ElectConsumePostServer will
// result in compilation errors.
type UnsafeElectConsumePostServer interface {
	mustEmbedUnimplementedElectConsumePostServer()
}

func RegisterElectConsumePostServer(s grpc.ServiceRegistrar, srv ElectConsumePostServer) {
	s.RegisterService(&ElectConsumePost_ServiceDesc, srv)
}

func _ElectConsumePost_ElectConsume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElectConsumeData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectConsumePostServer).ElectConsume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billManagerAPI.electConsumePost/electConsume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectConsumePostServer).ElectConsume(ctx, req.(*ElectConsumeData))
	}
	return interceptor(ctx, in, info, handler)
}

// ElectConsumePost_ServiceDesc is the grpc.ServiceDesc for ElectConsumePost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ElectConsumePost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "billManagerAPI.electConsumePost",
	HandlerType: (*ElectConsumePostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "electConsume",
			Handler:    _ElectConsumePost_ElectConsume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api.proto",
}

// ElectConsumeGetClient is the client API for ElectConsumeGet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ElectConsumeGetClient interface {
	ElectConsume(ctx context.Context, in *Date, opts ...grpc.CallOption) (*OnedayElectConsume, error)
}

type electConsumeGetClient struct {
	cc grpc.ClientConnInterface
}

func NewElectConsumeGetClient(cc grpc.ClientConnInterface) ElectConsumeGetClient {
	return &electConsumeGetClient{cc}
}

func (c *electConsumeGetClient) ElectConsume(ctx context.Context, in *Date, opts ...grpc.CallOption) (*OnedayElectConsume, error) {
	out := new(OnedayElectConsume)
	err := c.cc.Invoke(ctx, "/billManagerAPI.electConsumeGet/electConsume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ElectConsumeGetServer is the server API for ElectConsumeGet service.
// All implementations must embed UnimplementedElectConsumeGetServer
// for forward compatibility
type ElectConsumeGetServer interface {
	ElectConsume(context.Context, *Date) (*OnedayElectConsume, error)
	mustEmbedUnimplementedElectConsumeGetServer()
}

// UnimplementedElectConsumeGetServer must be embedded to have forward compatible implementations.
type UnimplementedElectConsumeGetServer struct {
}

func (UnimplementedElectConsumeGetServer) ElectConsume(context.Context, *Date) (*OnedayElectConsume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ElectConsume not implemented")
}
func (UnimplementedElectConsumeGetServer) mustEmbedUnimplementedElectConsumeGetServer() {}

// UnsafeElectConsumeGetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ElectConsumeGetServer will
// result in compilation errors.
type UnsafeElectConsumeGetServer interface {
	mustEmbedUnimplementedElectConsumeGetServer()
}

func RegisterElectConsumeGetServer(s grpc.ServiceRegistrar, srv ElectConsumeGetServer) {
	s.RegisterService(&ElectConsumeGet_ServiceDesc, srv)
}

func _ElectConsumeGet_ElectConsume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Date)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectConsumeGetServer).ElectConsume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billManagerAPI.electConsumeGet/electConsume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectConsumeGetServer).ElectConsume(ctx, req.(*Date))
	}
	return interceptor(ctx, in, info, handler)
}

// ElectConsumeGet_ServiceDesc is the grpc.ServiceDesc for ElectConsumeGet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ElectConsumeGet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "billManagerAPI.electConsumeGet",
	HandlerType: (*ElectConsumeGetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "electConsume",
			Handler:    _ElectConsumeGet_ElectConsume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api.proto",
}
