// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.16.3
// source: proto/api.proto

package grpcapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ElectConsumeServiceClient is the client API for ElectConsumeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ElectConsumeServiceClient interface {
	ElectConsumePost(ctx context.Context, in *OnedayElectConsume, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ElectConsumeGet(ctx context.Context, in *DateStruct, opts ...grpc.CallOption) (*OnedayElectConsume, error)
}

type electConsumeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewElectConsumeServiceClient(cc grpc.ClientConnInterface) ElectConsumeServiceClient {
	return &electConsumeServiceClient{cc}
}

func (c *electConsumeServiceClient) ElectConsumePost(ctx context.Context, in *OnedayElectConsume, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/billManagerAPI.ElectConsumeService/ElectConsumePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *electConsumeServiceClient) ElectConsumeGet(ctx context.Context, in *DateStruct, opts ...grpc.CallOption) (*OnedayElectConsume, error) {
	out := new(OnedayElectConsume)
	err := c.cc.Invoke(ctx, "/billManagerAPI.ElectConsumeService/ElectConsumeGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ElectConsumeServiceServer is the server API for ElectConsumeService service.
// All implementations must embed UnimplementedElectConsumeServiceServer
// for forward compatibility
type ElectConsumeServiceServer interface {
	ElectConsumePost(context.Context, *OnedayElectConsume) (*emptypb.Empty, error)
	ElectConsumeGet(context.Context, *DateStruct) (*OnedayElectConsume, error)
	mustEmbedUnimplementedElectConsumeServiceServer()
}

// UnimplementedElectConsumeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedElectConsumeServiceServer struct {
}

func (UnimplementedElectConsumeServiceServer) ElectConsumePost(context.Context, *OnedayElectConsume) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ElectConsumePost not implemented")
}
func (UnimplementedElectConsumeServiceServer) ElectConsumeGet(context.Context, *DateStruct) (*OnedayElectConsume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ElectConsumeGet not implemented")
}
func (UnimplementedElectConsumeServiceServer) mustEmbedUnimplementedElectConsumeServiceServer() {}

// UnsafeElectConsumeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ElectConsumeServiceServer will
// result in compilation errors.
type UnsafeElectConsumeServiceServer interface {
	mustEmbedUnimplementedElectConsumeServiceServer()
}

func RegisterElectConsumeServiceServer(s grpc.ServiceRegistrar, srv ElectConsumeServiceServer) {
	s.RegisterService(&ElectConsumeService_ServiceDesc, srv)
}

func _ElectConsumeService_ElectConsumePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnedayElectConsume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectConsumeServiceServer).ElectConsumePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billManagerAPI.ElectConsumeService/ElectConsumePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectConsumeServiceServer).ElectConsumePost(ctx, req.(*OnedayElectConsume))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElectConsumeService_ElectConsumeGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectConsumeServiceServer).ElectConsumeGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billManagerAPI.ElectConsumeService/ElectConsumeGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectConsumeServiceServer).ElectConsumeGet(ctx, req.(*DateStruct))
	}
	return interceptor(ctx, in, info, handler)
}

// ElectConsumeService_ServiceDesc is the grpc.ServiceDesc for ElectConsumeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ElectConsumeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "billManagerAPI.ElectConsumeService",
	HandlerType: (*ElectConsumeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ElectConsumePost",
			Handler:    _ElectConsumeService_ElectConsumePost_Handler,
		},
		{
			MethodName: "ElectConsumeGet",
			Handler:    _ElectConsumeService_ElectConsumeGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api.proto",
}
